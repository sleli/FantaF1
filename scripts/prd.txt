# FantaF1 - Product Requirements Document

## Overview
FantaF1 è una piattaforma web per gestire un gioco personalizzato di Fanta Formula 1, pensato per piccoli gruppi di amici. Ogni utente può fare un pronostico sui primi tre classificati di una gara (sia principale che sprint), ottenendo punti in base alla correttezza delle previsioni. La piattaforma automatizza il processo di inserimento pronostici, gestione eventi e calcolo punteggi, offrendo una dashboard di classifica aggiornata.

## Core Features

### Autenticazione e gestione utenti
- Login/logout per utenti registrati
- Due ruoli: "Admin" (gestione eventi e risultati) e "Giocatore" (solo pronostici)
- Integrazione con NextAuth.js per gestione utenti, ruoli e sessioni

### Gestione Eventi (solo Admin)
- Creazione evento: tipo (Race o Sprint), nome, data, data di chiusura invio pronostici
- Impostazione ordine di arrivo reale post-gara
- Modifica evento finché non concluso

### Invio Pronostici (Giocatori e Admin)
- Selezione dei primi 3 piloti da una lista predefinita
- Invio pronostico solo prima della data di chiusura
- Possibilità di modifica fino alla chiusura
- Blocchi logici per evitare errori (duplicati, fuori tempo)

### Calcolo Punteggi automatico
- Confronto tra pronostico e risultato reale
- Sistema di punteggio:
  * 25 punti per il 1° corretto
  * 15 punti per il 2° corretto
  * 10 punti per il 3° corretto
  * 5 punti per ogni pilota presente nei primi 3 ma fuori ordine
  * Tutti i valori dimezzati per eventi Sprint

### Dashboard Classifiche
- Classifica generale aggiornata in tempo reale
- Classifica per evento
- Dettaglio dei punteggi ottenuti da ciascun utente per ogni evento

## Technical Stack
- Frontend: Next.js + TypeScript + Tailwind CSS
- Autenticazione: NextAuth.js
- Database: Supabase (PostgreSQL)
- ORM: Prisma
- Deploy: Vercel

## Data Models
- Utente: id, nome, email, ruolo
- Evento: id, nome, tipo, data, chiusura, stato, ordine_arrivo
- Pronostico: id, utente_id, evento_id, posizioni (array piloti)
- Pilota: id, nome

## Development Phases

### Fase 1 – Setup base
- Inizializzare progetto Next.js con TypeScript e Tailwind CSS
- Integrare NextAuth.js per autenticazione
- Configurare Supabase e creare database PostgreSQL
- Definire schema database con Prisma

### Fase 2 – Autenticazione e ruoli
- Implementare logica per distinguere ruoli (admin/giocatore)
- Proteggere le route in base al ruolo
- Setup middleware di autenticazione

### Fase 3 – Gestione dati base
- Creare CRUD per piloti (popolazione statica)
- Creare interfaccia e backend per CRUD eventi (admin)
- Implementare form per invio/modifica pronostici

### Fase 4 – Funzionalità core
- Implementare logica di blocco pronostici oltre data di chiusura
- Interfaccia admin per inserimento risultato ufficiale
- Funzione di calcolo punteggio (Race vs Sprint)
- Sistema di salvataggio punteggi

### Fase 5 – Dashboard e classifiche
- Dashboard utente con pronostici e punteggi personali
- Classifica per evento
- Classifica generale cumulativa

### Fase 6 – UI/UX e ottimizzazioni
- Interfaccia responsive mobile-friendly
- Notifiche e feedback utente
- Stato eventi visibile (attivo, chiuso, completato)
- Ottimizzazioni performance

## MVP Requirements
- Sistema autenticazione con ruoli
- Gestione eventi da parte admin
- Invio e modifica pronostici
- Calcolo automatico punteggi
- Visualizzazione classifiche

## Success Criteria
- Utenti possono registrarsi e autenticarsi
- Admin può creare e gestire eventi
- Giocatori possono inviare pronostici entro i termini
- Punteggi calcolati automaticamente e correttamente
- Classifiche aggiornate in tempo reale
- Interfaccia responsive e user-friendly
